# Placeholder for ai_doc_summarizer/src/storage/cassandra_client.py
import logging
from cassandra.cluster import Cluster
from cassandra.query import SimpleStatement
from src.utils.helpers import load_config

logger = logging.getLogger("ai_summarizer.cassandra_client")

class CassandraClient:
    def __init__(self):
        cfg = load_config()
        hosts = cfg["cassandra"]["hosts"]
        port = cfg["cassandra"]["port"]
        keyspace = cfg["cassandra"]["keyspace"]

        self.cluster = Cluster(hosts, port=port)
        self.session = self.cluster.connect()
        # Ensure keyspace and table exist
        self.session.execute(f"""
            CREATE KEYSPACE IF NOT EXISTS {keyspace}
            WITH replication = {{'class':'SimpleStrategy', 'replication_factor':'1'}};
        """)
        self.session.set_keyspace(keyspace)
        self.session.execute("""
            CREATE TABLE IF NOT EXISTS summaries (
                doc_id text PRIMARY KEY,
                content text,
                summary list<text>
            );
        """)

    def insert_summary(self, content: str, summary: list):
        """
        Inserts or updates a summary with autogenerated doc_id = hash(content).
        """
        doc_id = str(hash(content))
        stmt = SimpleStatement("""
            INSERT INTO summaries (doc_id, content, summary)
            VALUES (%s, %s, %s)
        """)
        try:
            self.session.execute(stmt, (doc_id, content, summary))
            logger.debug("Inserted summary for doc_id=%s", doc_id)
        except Exception as e:
            logger.error("Cassandra insert error: %s", e)

    def insert_summary_id(self, doc_id: str, content: str, summary: list):
        """
        Inserts summary using explicit doc_id (from Kafka message).
        """
        stmt = SimpleStatement("""
            INSERT INTO summaries (doc_id, content, summary)
            VALUES (%s, %s, %s)
        """)
        try:
            self.session.execute(stmt, (doc_id, content, summary))
            logger.debug("Inserted summary for doc_id=%s", doc_id)
        except Exception as e:
            logger.error("Cassandra insert error: %s", e)

    def get_summary(self, doc_id: str):
        stmt = SimpleStatement("SELECT summary FROM summaries WHERE doc_id=%s")
        try:
            rows = self.session.execute(stmt, (doc_id,))
            for row in rows:
                return row.summary
            return None
        except Exception as e:
            logger.error("Cassandra query error: %s", e)
            return None
